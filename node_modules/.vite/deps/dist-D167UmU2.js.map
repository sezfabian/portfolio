{"version":3,"file":"dist-D167UmU2.js","names":["THREE.BufferGeometry","THREE.Vector3","THREE.Vector2","THREE.Matrix4","THREE.BufferAttribute","THREE.ShaderMaterial","THREE.Color","THREE.Ray","THREE.Sphere","THREE.LineSegments"],"sources":["../../meshline/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport * as THREE from \"three\";\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n  let i;\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i++)\n      dst[i + dstOffset] = src[i];\n  }\n  return dst;\n}\nfunction convertPoints(points) {\n  if (points instanceof Float32Array)\n    return points;\n  if (points instanceof THREE.BufferGeometry)\n    return points.getAttribute(\"position\").array;\n  return points.map((p) => {\n    const isArray = Array.isArray(p);\n    return p instanceof THREE.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n  }).flat();\n}\nclass MeshLineGeometry extends THREE.BufferGeometry {\n  constructor() {\n    super();\n    __publicField(this, \"type\", \"MeshLine\");\n    __publicField(this, \"isMeshLine\", true);\n    __publicField(this, \"positions\", []);\n    __publicField(this, \"previous\", []);\n    __publicField(this, \"next\", []);\n    __publicField(this, \"side\", []);\n    __publicField(this, \"width\", []);\n    __publicField(this, \"indices_array\", []);\n    __publicField(this, \"uvs\", []);\n    __publicField(this, \"counters\", []);\n    __publicField(this, \"widthCallback\", null);\n    __publicField(this, \"_attributes\");\n    __publicField(this, \"_points\", []);\n    __publicField(this, \"points\");\n    __publicField(this, \"matrixWorld\", new THREE.Matrix4());\n    Object.defineProperties(this, {\n      points: {\n        enumerable: true,\n        get() {\n          return this._points;\n        },\n        set(value) {\n          this.setPoints(value, this.widthCallback);\n        }\n      }\n    });\n  }\n  setMatrixWorld(matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  }\n  setPoints(points, wcb) {\n    points = convertPoints(points);\n    this._points = points;\n    this.widthCallback = wcb != null ? wcb : null;\n    this.positions = [];\n    this.counters = [];\n    if (points.length && points[0] instanceof THREE.Vector3) {\n      for (let j = 0; j < points.length; j++) {\n        const p = points[j];\n        const c = j / (points.length - 1);\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      for (let j = 0; j < points.length; j += 3) {\n        const c = j / (points.length - 1);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n    this.process();\n  }\n  compareV3(a, b) {\n    const aa = a * 6;\n    const ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  }\n  copyV3(a) {\n    const aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  }\n  process() {\n    const l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    let w;\n    let v;\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n    for (let j = 0; j < l; j++) {\n      this.side.push(1);\n      this.side.push(-1);\n      if (this.widthCallback)\n        w = this.widthCallback(j / (l - 1));\n      else\n        w = 1;\n      this.width.push(w);\n      this.width.push(w);\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n      if (j < l - 1) {\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n        const n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      if (j > 0) {\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n    if (!this._attributes || this._attributes.position.count !== this.counters.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.copyArray(new Float32Array(this.next));\n      this._attributes.next.needsUpdate = true;\n      this._attributes.side.copyArray(new Float32Array(this.side));\n      this._attributes.side.needsUpdate = true;\n      this._attributes.width.copyArray(new Float32Array(this.width));\n      this._attributes.width.needsUpdate = true;\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n      this._attributes.uv.needsUpdate = true;\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n      this._attributes.index.needsUpdate = true;\n    }\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n  advance({ x, y, z }) {\n    const positions = this._attributes.position.array;\n    const previous = this._attributes.previous.array;\n    const next = this._attributes.next.array;\n    const l = positions.length;\n    memcpy(positions, 0, previous, 0, l);\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = x;\n    positions[l - 5] = y;\n    positions[l - 4] = z;\n    positions[l - 3] = x;\n    positions[l - 2] = y;\n    positions[l - 1] = z;\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = x;\n    next[l - 5] = y;\n    next[l - 4] = z;\n    next[l - 3] = x;\n    next[l - 2] = y;\n    next[l - 1] = z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  }\n}\nconst vertexShader = `\n  #include <common>\n  #include <logdepthbuf_pars_vertex>\n  #include <fog_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n    vCounters = counters;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0) * aspect;\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy * aspect;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <clipping_planes_vertex>\n    #include <fog_vertex>\n  }\n`;\nconst version = /* @__PURE__ */ (() => parseInt(THREE.REVISION.replace(/\\D+/g, \"\")))();\nconst colorspace_fragment = version >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\";\nconst fragmentShader = `\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  #include <clipping_planes_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useGradient;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  uniform vec3 gradient[2];\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 diffuseColor = vColor;\n    if (useGradient == 1.) diffuseColor = vec4(mix(gradient[0], gradient[1], vCounters), 1.0);\n    if (useMap == 1.) diffuseColor *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) diffuseColor.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (diffuseColor.a < alphaTest) discard;\n    if (useDash == 1.) diffuseColor.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    diffuseColor.a *= step(vCounters, visibility);\n    #include <clipping_planes_fragment>\n    gl_FragColor = diffuseColor;     \n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <${colorspace_fragment}>\n  }\n`;\nclass MeshLineMaterial extends THREE.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: {\n        ...THREE.UniformsLib.fog,\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(16777215) },\n        gradient: { value: [new THREE.Color(16711680), new THREE.Color(65280)] },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        useGradient: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) }\n      },\n      vertexShader,\n      fragmentShader\n    });\n    __publicField(this, \"lineWidth\");\n    __publicField(this, \"map\");\n    __publicField(this, \"useMap\");\n    __publicField(this, \"alphaMap\");\n    __publicField(this, \"useAlphaMap\");\n    __publicField(this, \"color\");\n    __publicField(this, \"gradient\");\n    __publicField(this, \"resolution\");\n    __publicField(this, \"sizeAttenuation\");\n    __publicField(this, \"dashArray\");\n    __publicField(this, \"dashOffset\");\n    __publicField(this, \"dashRatio\");\n    __publicField(this, \"useDash\");\n    __publicField(this, \"useGradient\");\n    __publicField(this, \"visibility\");\n    __publicField(this, \"repeat\");\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      gradient: {\n        enumerable: true,\n        get() {\n          return this.uniforms.gradient.value;\n        },\n        set(value) {\n          this.uniforms.gradient.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      useGradient: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useGradient.value;\n        },\n        set(value) {\n          this.uniforms.useGradient.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.gradient = source.gradient;\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray = source.dashArray;\n    this.dashOffset = source.dashOffset;\n    this.dashRatio = source.dashRatio;\n    this.useDash = source.useDash;\n    this.useGradient = source.useGradient;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  }\n}\nfunction raycast(raycaster, intersects) {\n  const inverseMatrix = new THREE.Matrix4();\n  const ray = new THREE.Ray();\n  const sphere = new THREE.Sphere();\n  const interRay = new THREE.Vector3();\n  const geometry = this.geometry;\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n  if (!raycaster.ray.intersectSphere(sphere, interRay))\n    return;\n  inverseMatrix.copy(this.matrixWorld).invert();\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n  const vStart = new THREE.Vector3();\n  const vEnd = new THREE.Vector3();\n  const interSegment = new THREE.Vector3();\n  const step = this instanceof THREE.LineSegments ? 2 : 1;\n  const index = geometry.index;\n  const attributes = geometry.attributes;\n  if (index !== null) {\n    const indices = index.array;\n    const positions = attributes.position.array;\n    const widths = attributes.width.array;\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\n      const a = indices[i];\n      const b = indices[i + 1];\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      const width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\n      const precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n      const precisionSq = precision * precision;\n      const distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n      if (distSq > precisionSq)\n        continue;\n      interRay.applyMatrix4(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(interRay);\n      if (distance < raycaster.near || distance > raycaster.far)\n        continue;\n      intersects.push({\n        distance,\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: void 0,\n        object: this\n      });\n      i = l;\n    }\n  }\n}\nexport {\n  MeshLineGeometry,\n  MeshLineMaterial,\n  raycast\n};\n"],"mappings":"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"}